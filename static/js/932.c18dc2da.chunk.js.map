{"version":3,"file":"static/js/932.c18dc2da.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/curves/src/secp256k1.ts","../node_modules/@noble/curves/src/_shortw_utils.ts"],"sourcesContent":["/**\n * HMAC: RFC2104 message authentication code.\n * @module\n */\nimport { abytes, aexists, ahash } from './_assert.js';\nimport { Hash, toBytes, type CHash, type Input } from './utils.js';\n\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    ahash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input): this {\n    aexists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array): void {\n    aexists(this);\n    abytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest(): Uint8Array {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy(): void {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n * @example\n * import { hmac } from '@noble/hashes/hmac';\n * import { sha256 } from '@noble/hashes/sha2';\n * const mac1 = hmac(sha256, 'key', 'message');\n */\nexport const hmac: {\n  (hash: CHash, key: Input, message: Input): Uint8Array;\n  create(hash: CHash, key: Input): HMAC<any>;\n} = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/**\n * Hex, bytes and number utilities.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = /* @__PURE__ */ BigInt(0);\nconst _1n = /* @__PURE__ */ BigInt(1);\nconst _2n = /* @__PURE__ */ BigInt(2);\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nexport function isBytes(a: unknown): a is Uint8Array {\n  return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n\nexport function abytes(item: unknown): void {\n  if (!isBytes(item)) throw new Error('Uint8Array expected');\n}\n\nexport function abool(title: string, value: boolean): void {\n  if (typeof value !== 'boolean') throw new Error(title + ' boolean expected, got ' + value);\n}\n\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  abytes(bytes);\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? '0' + hex : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  return hex === '' ? _0n : BigInt('0x' + hex); // Big Endian\n}\n\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 } as const;\nfunction asciiToBase16(ch: number): number | undefined {\n  if (ch >= asciis._0 && ch <= asciis._9) return ch - asciis._0; // '2' => 50-48\n  if (ch >= asciis.A && ch <= asciis.F) return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n  if (ch >= asciis.a && ch <= asciis.f) return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n  return;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const hl = hex.length;\n  const al = hl / 2;\n  if (hl % 2) throw new Error('hex string expected, got unpadded hex of length ' + hl);\n  const array = new Uint8Array(al);\n  for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n    const n1 = asciiToBase16(hex.charCodeAt(hi));\n    const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n    if (n1 === undefined || n2 === undefined) {\n      const char = hex[hi] + hex[hi + 1];\n      throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n    }\n    array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  abytes(bytes);\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(title + ' must be hex string or Uint8Array, cause: ' + e);\n    }\n  } else if (isBytes(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(title + ' must be hex string or Uint8Array');\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(title + ' of length ' + expectedLength + ' expected, got ' + len);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  let sum = 0;\n  for (let i = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    abytes(a);\n    sum += a.length;\n  }\n  const res = new Uint8Array(sum);\n  for (let i = 0, pad = 0; i < arrays.length; i++) {\n    const a = arrays[i];\n    res.set(a, pad);\n    pad += a.length;\n  }\n  return res;\n}\n\n// Compares 2 u8a-s in kinda constant time\nexport function equalBytes(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false;\n  let diff = 0;\n  for (let i = 0; i < a.length; i++) diff |= a[i] ^ b[i];\n  return diff === 0;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error('string expected');\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Is positive bigint\nconst isPosBig = (n: bigint) => typeof n === 'bigint' && _0n <= n;\n\nexport function inRange(n: bigint, min: bigint, max: bigint): boolean {\n  return isPosBig(n) && isPosBig(min) && isPosBig(max) && min <= n && n < max;\n}\n\n/**\n * Asserts min <= n < max. NOTE: It's < max and not <= max.\n * @example\n * aInRange('x', x, 1n, 256n); // would assume x is in (1n..255n)\n */\nexport function aInRange(title: string, n: bigint, min: bigint, max: bigint): void {\n  // Why min <= n < max and not a (min < n < max) OR b (min <= n <= max)?\n  // consider P=256n, min=0n, max=P\n  // - a for min=0 would require -1:          `inRange('x', x, -1n, P)`\n  // - b would commonly require subtraction:  `inRange('x', x, 0n, P - 1n)`\n  // - our way is the cleanest:               `inRange('x', x, 0n, P)\n  if (!inRange(n, min, max))\n    throw new Error('expected valid ' + title + ': ' + min + ' <= n < ' + max + ', got ' + n);\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint): number {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number): bigint {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport function bitSet(n: bigint, pos: number, value: boolean): bigint {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n}\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number): bigint => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any): boolean => typeof val === 'bigint',\n  function: (val: any): boolean => typeof val === 'function',\n  boolean: (val: any): boolean => typeof val === 'boolean',\n  string: (val: any): boolean => typeof val === 'string',\n  stringOrUint8Array: (val: any): boolean => typeof val === 'string' || isBytes(val),\n  isSafeInteger: (val: any): boolean => Number.isSafeInteger(val),\n  array: (val: any): boolean => Array.isArray(val),\n  field: (val: any, object: any): any => (object as any).Fp.isValid(val),\n  hash: (val: any): boolean => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n): T {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function') throw new Error('invalid validator function');\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        'param ' + String(fieldName) + ' is invalid. Expected ' + type + ', got ' + val\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n\n/**\n * throws not implemented error\n */\nexport const notImplemented = (): never => {\n  throw new Error('not implemented');\n};\n\n/**\n * Memoizes (caches) computation result.\n * Uses WeakMap: the value is going auto-cleaned by GC after last reference is removed.\n */\nexport function memoized<T extends object, R, O extends any[]>(\n  fn: (arg: T, ...args: O) => R\n): (arg: T, ...args: O) => R {\n  const map = new WeakMap<T, R>();\n  return (arg: T, ...args: O): R => {\n    const val = map.get(arg);\n    if (val !== undefined) return val;\n    const computed = fn(arg, ...args);\n    map.set(arg, computed);\n    return computed;\n  };\n}\n","/**\n * Utils for modular division and finite fields.\n * A finite field over 11 is integer number operations `mod 11`.\n * There is no division: it is replaced by modular multiplicative inverse.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  bitMask,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  numberToBytesBE,\n  numberToBytesLE,\n  validateObject,\n} from './utils.js';\n\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = /* @__PURE__ */ BigInt(2), _3n = /* @__PURE__ */ BigInt(3);\n// prettier-ignore\nconst _4n = /* @__PURE__ */ BigInt(4), _5n = /* @__PURE__ */ BigInt(5), _8n = /* @__PURE__ */ BigInt(8);\n// prettier-ignore\nconst _9n =/* @__PURE__ */ BigInt(9), _16n = /* @__PURE__ */ BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @todo use field version && remove\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (modulo <= _0n) throw new Error('invalid modulus');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n/** Does `x^(2^power)` mod p. `pow2(30, 4)` == `30^(2^4)` */\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n/**\n * Inverses number over modulo.\n * Implemented using [Euclidean GCD](https://brilliant.org/wiki/extended-euclidean-algorithm/).\n */\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n) throw new Error('invert: expected non-zero number');\n  if (modulo <= _0n) throw new Error('invert: expected positive modulus, got ' + modulo);\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++) {\n    // Crash instead of infinity loop, we cannot reasonable count until P.\n    if (Z > 1000) throw new Error('Cannot find square root: likely non-prime P');\n  }\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\n/**\n * Square root for a finite field. It will try to check if optimizations are applicable and fall back to 4:\n *\n * 1. P ≡ 3 (mod 4)\n * 2. P ≡ 5 (mod 8)\n * 3. P ≡ 9 (mod 16)\n * 4. Tonelli-Shanks algorithm\n *\n * Different algorithms can give different roots, it is up to user to decide which one they want.\n * For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n */\nexport function FpSqrt(P: bigint): <T>(Fp: IField<T>, n: T) => T {\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint): boolean =>\n  (mod(num, modulo) & _1n) === _1n;\n\n/** Field is not always over prime: for example, Fp2 has ORDER(q)=p^m. */\nexport interface IField<T> {\n  ORDER: bigint;\n  isLE: boolean;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>): IField<T> {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('invalid exponent, negatives unsupported');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n/**\n * Legendre symbol.\n * * (a | p) ≡ 1    if a is a square (mod p), quadratic residue\n * * (a | p) ≡ -1   if a is not a square (mod p), quadratic non residue\n * * (a | p) ≡ 0    if a ≡ 0 (mod p)\n */\nexport function FpLegendre(order: bigint): <T>(f: IField<T>, x: T) => T {\n  const legendreConst = (order - _1n) / _2n; // Integer arithmetic\n  return <T>(f: IField<T>, x: T): T => f.pow(x, legendreConst);\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>): (x: T) => boolean {\n  const legendre = FpLegendre(f.ORDER);\n  return (x: T): boolean => {\n    const p = legendre(f, x);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(\n  n: bigint,\n  nBitLength?: number\n): {\n  nBitLength: number;\n  nByteLength: number;\n} {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * Fragile: always run a benchmark on a change.\n * Security note: operations don't check 'isValid' for all elements for performance reasons,\n * it is caller responsibility to check this.\n * This is low-level code, please make sure you know what you're doing.\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error('invalid field: expected ORDER > 0, got ' + ORDER);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('invalid field: expected ORDER of <= 2048 bytes');\n  let sqrtP: ReturnType<typeof FpSqrt>; // cached sqrtP\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    isLE,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error('invalid field element: expected bigint, got ' + typeof num);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt:\n      redef.sqrt ||\n      ((n) => {\n        if (!sqrtP) sqrtP = FpSqrt(ORDER);\n        return sqrtP(f, n);\n      }),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error('Field.fromBytes: expected ' + BYTES + ' bytes, got ' + bytes.length);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T): T {\n  if (!Fp.isOdd) throw new Error(\"Field doesn't have isOdd\");\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use `mapKeyToField` instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(\n      'hashToPrivateScalar: expected ' + minLen + '-1024 bytes of input, got ' + hashLen\n    );\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error('expected ' + minLen + '-1024 bytes of input, got ' + len);\n  const num = isLE ? bytesToNumberLE(key) : bytesToNumberBE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/**\n * Methods for elliptic curve multiplication by scalars.\n * Contains wNAF, pippenger\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { type IField, nLength, validateField } from './modular.js';\nimport { bitLen, validateObject } from './utils.js';\n\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\nfunction constTimeNegate<T extends Group<T>>(condition: boolean, item: T): T {\n  const neg = item.negate();\n  return condition ? neg : item;\n}\n\nfunction validateW(W: number, bits: number) {\n  if (!Number.isSafeInteger(W) || W <= 0 || W > bits)\n    throw new Error('invalid window size, expected [1..' + bits + '], got W=' + W);\n}\n\nfunction calcWOpts(W: number, bits: number) {\n  validateW(W, bits);\n  const windows = Math.ceil(bits / W) + 1; // +1, because\n  const windowSize = 2 ** (W - 1); // -1 because we skip zero\n  return { windows, windowSize };\n}\n\nfunction validateMSMPoints(points: any[], c: any) {\n  if (!Array.isArray(points)) throw new Error('array expected');\n  points.forEach((p, i) => {\n    if (!(p instanceof c)) throw new Error('invalid point at index ' + i);\n  });\n}\nfunction validateMSMScalars(scalars: any[], field: any) {\n  if (!Array.isArray(scalars)) throw new Error('array of scalars expected');\n  scalars.forEach((s, i) => {\n    if (!field.isValid(s)) throw new Error('invalid scalar at index ' + i);\n  });\n}\n\n// Since points in different groups cannot be equal (different object constructor),\n// we can have single place to store precomputes\nconst pointPrecomputes = new WeakMap<any, any[]>();\nconst pointWindowSizes = new WeakMap<any, number>(); // This allows use make points immutable (nothing changes inside)\n\nfunction getW(P: any): number {\n  return pointWindowSizes.get(P) || 1;\n}\n\nexport type IWNAF<T extends Group<T>> = {\n  constTimeNegate: <T extends Group<T>>(condition: boolean, item: T) => T;\n  hasPrecomputes(elm: T): boolean;\n  unsafeLadder(elm: T, n: bigint, p?: T): T;\n  precomputeWindow(elm: T, W: number): Group<T>[];\n  wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T };\n  wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc?: T): T;\n  getPrecomputes(W: number, P: T, transform: Mapper<T>): T[];\n  wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T };\n  wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T;\n  setWindowSize(P: T, W: number): void;\n};\n\n/**\n * Elliptic curve multiplication of Point by scalar. Fragile.\n * Scalars should always be less than curve order: this should be checked inside of a curve itself.\n * Creates precomputation tables for fast multiplication:\n * - private scalar is split by fixed size windows of W bits\n * - every window point is collected from window's table & added to accumulator\n * - since windows are different, same point inside tables won't be accessed more than once per calc\n * - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n * - +1 window is neccessary for wNAF\n * - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n *\n * @todo Research returning 2d JS array of windows, instead of a single window.\n * This would allow windows to be in different memory locations\n */\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number): IWNAF<T> {\n  return {\n    constTimeNegate,\n\n    hasPrecomputes(elm: T) {\n      return getW(elm) !== 1;\n    },\n\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint, p = c.ZERO) {\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @param elm Point instance\n     * @param W window size\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = calcWOpts(W, bits);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    /**\n     * Implements ec unsafe (non const-time) multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @param acc accumulator point to add result of multiplication\n     * @returns point\n     */\n    wNAFUnsafe(W: number, precomputes: T[], n: bigint, acc: T = c.ZERO): T {\n      const { windows, windowSize } = calcWOpts(W, bits);\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        if (n === _0n) break; // No need to go over empty scalar\n        // Extract W bits.\n        let wbits = Number(n & mask);\n        // Shift number by W bits.\n        n >>= shiftBy;\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n        if (wbits === 0) continue;\n        let curr = precomputes[offset + Math.abs(wbits) - 1]; // -1 because we skip zero\n        if (wbits < 0) curr = curr.negate();\n        // NOTE: by re-using acc, we can save a lot of additions in case of MSM\n        acc = acc.add(curr);\n      }\n      return acc;\n    },\n\n    getPrecomputes(W: number, P: T, transform: Mapper<T>): T[] {\n      // Calculate precomputes on a first run, reuse them after\n      let comp = pointPrecomputes.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) pointPrecomputes.set(P, transform(comp));\n      }\n      return comp;\n    },\n\n    wNAFCached(P: T, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      const W = getW(P);\n      return this.wNAF(W, this.getPrecomputes(W, P, transform), n);\n    },\n\n    wNAFCachedUnsafe(P: T, n: bigint, transform: Mapper<T>, prev?: T): T {\n      const W = getW(P);\n      if (W === 1) return this.unsafeLadder(P, n, prev); // For W=1 ladder is ~x2 faster\n      return this.wNAFUnsafe(W, this.getPrecomputes(W, P, transform), n, prev);\n    },\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n\n    setWindowSize(P: T, W: number) {\n      validateW(W, bits);\n      pointWindowSizes.set(P, W);\n      pointPrecomputes.delete(P);\n    },\n  };\n}\n\n/**\n * Pippenger algorithm for multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * 30x faster vs naive addition on L=4096, 10x faster with precomputes.\n * For N=254bit, L=1, it does: 1024 ADD + 254 DBL. For L=5: 1536 ADD + 254 DBL.\n * Algorithmically constant-time (for same L), even when 1 point + scalar, or when scalar = 0.\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @param scalars array of L scalars (aka private keys / bigints)\n */\nexport function pippenger<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  scalars: bigint[]\n): T {\n  // If we split scalars by some window (let's say 8 bits), every chunk will only\n  // take 256 buckets even if there are 4096 scalars, also re-uses double.\n  // TODO:\n  // - https://eprint.iacr.org/2024/750.pdf\n  // - https://tches.iacr.org/index.php/TCHES/article/view/10287\n  // 0 is accepted in scalars\n  validateMSMPoints(points, c);\n  validateMSMScalars(scalars, fieldN);\n  if (points.length !== scalars.length)\n    throw new Error('arrays of points and scalars must have equal length');\n  const zero = c.ZERO;\n  const wbits = bitLen(BigInt(points.length));\n  const windowSize = wbits > 12 ? wbits - 3 : wbits > 4 ? wbits - 2 : wbits ? 2 : 1; // in bits\n  const MASK = (1 << windowSize) - 1;\n  const buckets = new Array(MASK + 1).fill(zero); // +1 for zero array\n  const lastBits = Math.floor((fieldN.BITS - 1) / windowSize) * windowSize;\n  let sum = zero;\n  for (let i = lastBits; i >= 0; i -= windowSize) {\n    buckets.fill(zero);\n    for (let j = 0; j < scalars.length; j++) {\n      const scalar = scalars[j];\n      const wbits = Number((scalar >> BigInt(i)) & BigInt(MASK));\n      buckets[wbits] = buckets[wbits].add(points[j]);\n    }\n    let resI = zero; // not using this will do small speed-up, but will lose ct\n    // Skip first bucket, because it is zero\n    for (let j = buckets.length - 1, sumI = zero; j > 0; j--) {\n      sumI = sumI.add(buckets[j]);\n      resI = resI.add(sumI);\n    }\n    sum = sum.add(resI);\n    if (i !== 0) for (let j = 0; j < windowSize; j++) sum = sum.double();\n  }\n  return sum as T;\n}\n/**\n * Precomputed multi-scalar multiplication (MSM, Pa + Qb + Rc + ...).\n * @param c Curve Point constructor\n * @param fieldN field over CURVE.N - important that it's not over CURVE.P\n * @param points array of L curve points\n * @returns function which multiplies points with scaars\n */\nexport function precomputeMSMUnsafe<T extends Group<T>>(\n  c: GroupConstructor<T>,\n  fieldN: IField<bigint>,\n  points: T[],\n  windowSize: number\n): (scalars: bigint[]) => T {\n  /**\n   * Performance Analysis of Window-based Precomputation\n   *\n   * Base Case (256-bit scalar, 8-bit window):\n   * - Standard precomputation requires:\n   *   - 31 additions per scalar × 256 scalars = 7,936 ops\n   *   - Plus 255 summary additions = 8,191 total ops\n   *   Note: Summary additions can be optimized via accumulator\n   *\n   * Chunked Precomputation Analysis:\n   * - Using 32 chunks requires:\n   *   - 255 additions per chunk\n   *   - 256 doublings\n   *   - Total: (255 × 32) + 256 = 8,416 ops\n   *\n   * Memory Usage Comparison:\n   * Window Size | Standard Points | Chunked Points\n   * ------------|-----------------|---------------\n   *     4-bit   |     520         |      15\n   *     8-bit   |    4,224        |     255\n   *    10-bit   |   13,824        |   1,023\n   *    16-bit   |  557,056        |  65,535\n   *\n   * Key Advantages:\n   * 1. Enables larger window sizes due to reduced memory overhead\n   * 2. More efficient for smaller scalar counts:\n   *    - 16 chunks: (16 × 255) + 256 = 4,336 ops\n   *    - ~2x faster than standard 8,191 ops\n   *\n   * Limitations:\n   * - Not suitable for plain precomputes (requires 256 constant doublings)\n   * - Performance degrades with larger scalar counts:\n   *   - Optimal for ~256 scalars\n   *   - Less efficient for 4096+ scalars (Pippenger preferred)\n   */\n  validateW(windowSize, fieldN.BITS);\n  validateMSMPoints(points, c);\n  const zero = c.ZERO;\n  const tableSize = 2 ** windowSize - 1; // table size (without zero)\n  const chunks = Math.ceil(fieldN.BITS / windowSize); // chunks of item\n  const MASK = BigInt((1 << windowSize) - 1);\n  const tables = points.map((p: T) => {\n    const res = [];\n    for (let i = 0, acc = p; i < tableSize; i++) {\n      res.push(acc);\n      acc = acc.add(p);\n    }\n    return res;\n  });\n  return (scalars: bigint[]): T => {\n    validateMSMScalars(scalars, fieldN);\n    if (scalars.length > points.length)\n      throw new Error('array of scalars must be smaller than array of points');\n    let res = zero;\n    for (let i = 0; i < chunks; i++) {\n      // No need to double if accumulator is still zero.\n      if (res !== zero) for (let j = 0; j < windowSize; j++) res = res.double();\n      const shiftBy = BigInt(chunks * windowSize - (i + 1) * windowSize);\n      for (let j = 0; j < scalars.length; j++) {\n        const n = scalars[j];\n        const curr = Number((n >> shiftBy) & MASK);\n        if (!curr) continue; // skip zero scalars chunks\n        res = res.add(tables[j][curr - 1]);\n      }\n    }\n    return res;\n  };\n}\n\n/**\n * Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n * Though generator can be different (Fp2 / Fp6 for BLS).\n */\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(\n  curve: BasicCurve<FP> & T\n): Readonly<\n  {\n    readonly nBitLength: number;\n    readonly nByteLength: number;\n  } & BasicCurve<FP> &\n    T & {\n      p: bigint;\n    }\n> {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/**\n * Short Weierstrass curve methods. The formula is: y² = x³ + ax + b.\n *\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance\n * of nominative types in TypeScript and interfaces only check for shape, so it's hard to create\n * unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * @todo https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport {\n  type AffinePoint,\n  type BasicCurve,\n  type Group,\n  type GroupConstructor,\n  pippenger,\n  validateBasic,\n  wNAF,\n} from './curve.js';\nimport {\n  Field,\n  type IField,\n  getMinHashLength,\n  invert,\n  mapHashToField,\n  mod,\n  validateField,\n} from './modular.js';\nimport * as ut from './utils.js';\nimport { type CHash, type Hex, type PrivKey, abool, ensureBytes, memoized } from './utils.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | boolean;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean; format?: 'compact' | 'der' | undefined };\n\nfunction validateSigVerOpts(opts: SignOpts | VerOpts) {\n  if (opts.lowS !== undefined) abool('lowS', opts.lowS);\n  if (opts.prehash !== undefined) abool('prehash', opts.prehash);\n}\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n  msm(points: ProjPointType<T>[], scalars: bigint[]): ProjPointType<T>;\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nexport type CurvePointsTypeWithLength<T> = Readonly<\n  CurvePointsType<T> & { nByteLength: number; nBitLength: number }\n>;\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>): CurvePointsTypeWithLength<T> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('invalid endomorphism, can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('invalid endomorphism, expected beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  CURVE: ReturnType<typeof validatePointOpts<T>>;\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\n\nexport class DERErr extends Error {\n  constructor(m = '') {\n    super(m);\n  }\n}\nexport type IDER = {\n  // asn.1 DER encoding utils\n  Err: typeof DERErr;\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string) => string;\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array };\n  };\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string;\n    decode(data: Uint8Array): bigint;\n  };\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint };\n  hexFromSig(sig: { r: bigint; s: bigint }): string;\n};\n/**\n * ASN.1 DER encoding utilities. ASN is very complex & fragile. Format:\n *\n *     [0x30 (SEQUENCE), bytelength, 0x02 (INTEGER), intLength, R, 0x02 (INTEGER), intLength, S]\n *\n * Docs: https://letsencrypt.org/docs/a-warm-welcome-to-asn1-and-der/, https://luca.ntop.org/Teaching/Appunti/asn1.html\n */\nexport const DER: IDER = {\n  // asn.1 DER encoding utils\n  Err: DERErr,\n  // Basic building block is TLV (Tag-Length-Value)\n  _tlv: {\n    encode: (tag: number, data: string): string => {\n      const { Err: E } = DER;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length & 1) throw new E('tlv.encode: unpadded data');\n      const dataLen = data.length / 2;\n      const len = ut.numberToHexUnpadded(dataLen);\n      if ((len.length / 2) & 0b1000_0000) throw new E('tlv.encode: long form length too big');\n      // length of length with long form flag\n      const lenLen = dataLen > 127 ? ut.numberToHexUnpadded((len.length / 2) | 0b1000_0000) : '';\n      const t = ut.numberToHexUnpadded(tag);\n      return t + lenLen + len + data;\n    },\n    // v - value, l - left bytes (unparsed)\n    decode(tag: number, data: Uint8Array): { v: Uint8Array; l: Uint8Array } {\n      const { Err: E } = DER;\n      let pos = 0;\n      if (tag < 0 || tag > 256) throw new E('tlv.encode: wrong tag');\n      if (data.length < 2 || data[pos++] !== tag) throw new E('tlv.decode: wrong tlv');\n      const first = data[pos++];\n      const isLong = !!(first & 0b1000_0000); // First bit of first length byte is flag for short/long form\n      let length = 0;\n      if (!isLong) length = first;\n      else {\n        // Long form: [longFlag(1bit), lengthLength(7bit), length (BE)]\n        const lenLen = first & 0b0111_1111;\n        if (!lenLen) throw new E('tlv.decode(long): indefinite length not supported');\n        if (lenLen > 4) throw new E('tlv.decode(long): byte length is too big'); // this will overflow u32 in js\n        const lengthBytes = data.subarray(pos, pos + lenLen);\n        if (lengthBytes.length !== lenLen) throw new E('tlv.decode: length bytes not complete');\n        if (lengthBytes[0] === 0) throw new E('tlv.decode(long): zero leftmost byte');\n        for (const b of lengthBytes) length = (length << 8) | b;\n        pos += lenLen;\n        if (length < 128) throw new E('tlv.decode(long): not minimal encoding');\n      }\n      const v = data.subarray(pos, pos + length);\n      if (v.length !== length) throw new E('tlv.decode: wrong value length');\n      return { v, l: data.subarray(pos + length) };\n    },\n  },\n  // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n  // since we always use positive integers here. It must always be empty:\n  // - add zero byte if exists\n  // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n  _int: {\n    encode(num: bigint): string {\n      const { Err: E } = DER;\n      if (num < _0n) throw new E('integer: negative integers are not allowed');\n      let hex = ut.numberToHexUnpadded(num);\n      // Pad with zero byte if negative flag is present\n      if (Number.parseInt(hex[0], 16) & 0b1000) hex = '00' + hex;\n      if (hex.length & 1) throw new E('unexpected DER parsing assertion: unpadded hex');\n      return hex;\n    },\n    decode(data: Uint8Array): bigint {\n      const { Err: E } = DER;\n      if (data[0] & 0b1000_0000) throw new E('invalid signature integer: negative');\n      if (data[0] === 0x00 && !(data[1] & 0b1000_0000))\n        throw new E('invalid signature integer: unnecessary leading zero');\n      return b2n(data);\n    },\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E, _int: int, _tlv: tlv } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    ut.abytes(data);\n    const { v: seqBytes, l: seqLeftBytes } = tlv.decode(0x30, data);\n    if (seqLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    const { v: rBytes, l: rLeftBytes } = tlv.decode(0x02, seqBytes);\n    const { v: sBytes, l: sLeftBytes } = tlv.decode(0x02, rLeftBytes);\n    if (sLeftBytes.length) throw new E('invalid signature: left bytes after parsing');\n    return { r: int.decode(rBytes), s: int.decode(sBytes) };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    const { _tlv: tlv, _int: int } = DER;\n    const rs = tlv.encode(0x02, int.encode(sig.r));\n    const ss = tlv.encode(0x02, int.encode(sig.s));\n    const seq = rs + ss;\n    return tlv.encode(0x30, seq);\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>): CurvePointsRes<T> {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const Fn = Field(CURVE.n, CURVE.nBitLength);\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return ut.inRange(num, _1n, CURVE.n);\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: N } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (ut.isBytes(key)) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length))\n        throw new Error('invalid private key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\n        'invalid private key, expected hex or ' + nByteLength + ' bytes, got ' + typeof key\n      );\n    }\n    if (wrapPrivateKey) num = mod(num, N); // disabled by default, enabled for BLS\n    ut.aInRange('private key', num, _1n, N); // num in range [1..N-1]\n    return num;\n  }\n\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n\n  // Memoized toAffine / validity check. They are heavy. Points are immutable.\n\n  // Converts Projective point to affine (x, y) coordinates.\n  // Can accept precomputed Z^-1 - for example, from invertBatch.\n  // (x, y, z) ∋ (x=x/z, y=y/z)\n  const toAffineMemo = memoized((p: Point, iz?: T): AffinePoint<T> => {\n    const { px: x, py: y, pz: z } = p;\n    // Fast-path for normalized points\n    if (Fp.eql(z, Fp.ONE)) return { x, y };\n    const is0 = p.is0();\n    // If invZ was 0, we return zero point. However we still want to execute\n    // all operations, so we replace invZ with a random number, 1.\n    if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n    const ax = Fp.mul(x, iz);\n    const ay = Fp.mul(y, iz);\n    const zz = Fp.mul(z, iz);\n    if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n    if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n    return { x: ax, y: ay };\n  });\n  // NOTE: on exception this will crash 'cached' and no value will be set.\n  // Otherwise true will be return\n  const assertValidMemo = memoized((p: Point) => {\n    if (p.is0()) {\n      // (0, 1, 0) aka ZERO is invalid in most contexts.\n      // In BLS, ZERO can be serialized, so we allow it.\n      // (0, 0, 0) is invalid representation of ZERO.\n      if (CURVE.allowInfinityPoint && !Fp.is0(p.py)) return;\n      throw new Error('bad point: ZERO');\n    }\n    // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n    const { x, y } = p.toAffine();\n    // Check if x, y are valid field elements\n    if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n    const left = Fp.sqr(y); // y²\n    const right = weierstrassEquation(x); // x³ + ax + b\n    if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n    if (!p.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    return true;\n  });\n\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(\n      readonly px: T,\n      readonly py: T,\n      readonly pz: T\n    ) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n      Object.freeze(this);\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // Multiscalar Multiplication\n    static msm(points: Point[], scalars: bigint[]): Point {\n      return pippenger(Point, Fn, points, scalars);\n    }\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      wnaf.setWindowSize(this, windowSize);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      assertValidMemo(this);\n    }\n\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, n, Point.normalizeZ);\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(sc: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', sc, _0n, N);\n      const I = Point.ZERO;\n      if (sc === _0n) return I;\n      if (this.is0() || sc === _1n) return this;\n\n      // Case a: no endomorphism. Case b: has precomputes.\n      if (!endo || wnaf.hasPrecomputes(this))\n        return wnaf.wNAFCachedUnsafe(this, sc, Point.normalizeZ);\n\n      // Case c: endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(sc);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      const { endo, n: N } = CURVE;\n      ut.aInRange('scalar', scalar, _1n, N);\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(scalar);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(scalar);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      return toAffineMemo(this, iz);\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      abool('isCompressed', isCompressed);\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      abool('isCompressed', isCompressed);\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(\n  curve: CurveType\n): Readonly<CurveType & { nByteLength: number; nBitLength: number }> {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\n/**\n * Creates short weierstrass curve and ECDSA signature methods for it.\n * @example\n * import { Field } from '@noble/curves/abstract/modular';\n * // Before that, define BigInt-s: a, b, p, n, Gx, Gy\n * const curve = weierstrass({ a, b, Fp: Field(p), n, Gx, Gy, h: 1n })\n */\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function modN(a: bigint) {\n    return mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      abool('isCompressed', isCompressed);\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!ut.inRange(x, _1n, Fp.ORDER)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y: bigint;\n        try {\n          y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        } catch (sqrtError) {\n          const suffix = sqrtError instanceof Error ? ': ' + sqrtError.message : '';\n          throw new Error('Point is not on curve' + suffix);\n        }\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        const cl = compressedLen;\n        const ul = uncompressedLen;\n        throw new Error(\n          'invalid Point, expected length of ' + cl + ', or uncompressed ' + ul + ', got ' + len\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(\n      readonly r: bigint,\n      readonly s: bigint,\n      readonly recovery?: number\n    ) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      ut.aInRange('r', this.r, _1n, CURVE_ORDER); // r in [1..N]\n      ut.aInRange('s', this.s, _1n, CURVE_ORDER); // s in [1..N]\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = getMinHashLength(CURVE.n);\n      return mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = ut.isBytes(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // Our custom check \"just in case\"\n      if (bytes.length > 8192) throw new Error('input is too large');\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    ut.aInRange('num < 2^' + CURVE.nBitLength, num, _0n, ORDER_MASK);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order,\n  // this will be invalid at least for P521. Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    validateSigVerOpts(opts);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null && ent !== false) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    const { lowS, prehash, format } = opts;\n\n    // Verify opts, deduce signature format\n    validateSigVerOpts(opts);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    if (format !== undefined && format !== 'compact' && format !== 'der')\n      throw new Error('format must be compact or der');\n    const isHex = typeof sg === 'string' || ut.isBytes(sg);\n    const isObj =\n      !isHex &&\n      !format &&\n      typeof sg === 'object' &&\n      sg !== null &&\n      typeof sg.r === 'bigint' &&\n      typeof sg.s === 'bigint';\n    if (!isHex && !isObj)\n      throw new Error('invalid signature, expected Uint8Array, hex string or Signature instance');\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (isObj) _sig = new Signature(sg.r, sg.s);\n      if (isHex) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          if (format !== 'compact') _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n        }\n        if (!_sig && format !== 'der') _sig = Signature.fromCompact(sg);\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      return false;\n    }\n    if (!_sig) return false;\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(\n  Fp: IField<T>,\n  Z: T\n): (u: T, v: T) => { isValid: boolean; value: T } {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n): (u: T) => { x: T; y: T } {\n  validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/**\n * hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380).\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { AffinePoint, Group, GroupConstructor } from './curve.js';\nimport { type IField, mod } from './modular.js';\nimport type { CHash } from './utils.js';\nimport { abytes, bytesToNumberBE, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\nexport type UnicodeOrBytes = string | Uint8Array;\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  anum(value);\n  anum(length);\n  if (value < 0 || value >= 1 << (8 * length)) throw new Error('invalid I2OSP input: ' + value);\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction anum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n/**\n * Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits.\n * [RFC 9380 5.3.1](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1).\n */\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (lenInBytes > 65535 || ell > 255) throw new Error('expand_message_xmd: invalid lenInBytes');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n/**\n * Produces a uniformly random byte string using an extendable-output function (XOF) H.\n * 1. The collision resistance of H MUST be at least k bits.\n * 2. H MUST be an XOF that has been proved indifferentiable from\n *    a random oracle under a reasonable cryptographic assumption.\n * [RFC 9380 5.3.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2).\n */\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  abytes(msg);\n  abytes(DST);\n  anum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F.\n * [RFC 9380 5.2](https://www.rfc-editor.org/rfc/rfc9380#section-5.2).\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  abytes(msg);\n  anum(count);\n  const DST = typeof _DST === 'string' ? utf8ToBytes(_DST) : _DST;\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport type XY<T> = (\n  x: T,\n  y: T\n) => {\n  x: T;\n  y: T;\n};\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]): XY<T> {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x: x, y: y };\n  };\n}\n\n/** Point interface, which curves must implement to work correctly with the module. */\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\nexport type HTFMethod<T> = (msg: Uint8Array, options?: htfBasicOpts) => H2CPoint<T>;\nexport type MapMethod<T> = (scalars: bigint[]) => H2CPoint<T>;\n\n/** Creates hash-to-curve methods from EC Point and mapToCurve function. */\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n): {\n  hashToCurve: HTFMethod<T>;\n  encodeToCurve: HTFMethod<T>;\n  mapToCurve: MapMethod<T>;\n} {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts): H2CPoint<T> {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n    // Same as encodeToCurve, but without hash\n    mapToCurve(scalars: bigint[]): H2CPoint<T> {\n      if (!Array.isArray(scalars)) throw new Error('mapToCurve: expected array of bigints');\n      for (const i of scalars)\n        if (typeof i !== 'bigint') throw new Error('mapToCurve: expected array of bigints');\n      const P = Point.fromAffine(mapToCurve(scalars)).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","/**\n * NIST secp256k1. See [pdf](https://www.secg.org/sec2-v2.pdf).\n *\n * Seems to be rigid (not backdoored)\n * [as per discussion](https://bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975).\n *\n * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n * [See explanation](https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066).\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { createCurve, type CurveFnWithCreate } from './_shortw_utils.js';\nimport { createHasher, type HTFMethod, isogenyMap } from './abstract/hash-to-curve.js';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport {\n  aInRange,\n  bytesToNumberBE,\n  concatBytes,\n  ensureBytes,\n  inRange,\n  numberToBytesBE,\n} from './abstract/utils.js';\nimport { mapToCurveSimpleSWU, type ProjPointType as PointType } from './abstract/weierstrass.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fpk1.eql(Fpk1.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fpk1 = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\n/**\n * secp256k1 short weierstrass curve and ECDSA signatures over it.\n *\n * @example\n * import { secp256k1 } from '@noble/curves/secp256k1';\n *\n * const priv = secp256k1.utils.randomPrivateKey();\n * const pub = secp256k1.getPublicKey(priv);\n * const msg = new Uint8Array(32).fill(1); // message hash (not message) in ecdsa\n * const sig = secp256k1.sign(msg, priv); // `{prehash: true}` option is available\n * const isValid = secp256k1.verify(sig, msg, pub) === true;\n */\nexport const secp256k1: CurveFnWithCreate = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7),\n    Fp: Fpk1, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    endo: {\n      // Endomorphism, see above\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  aInRange('x', x, _1n, secp256k1P); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\nconst num = bytesToNumberBE;\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(num(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ num(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(num(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(num(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = num(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!inRange(r, _1n, secp256k1P)) return false;\n    const s = num(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!inRange(s, _1n, secp256k1N)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport type SecpSchnorr = {\n  getPublicKey: typeof schnorrGetPublicKey;\n  sign: typeof schnorrSign;\n  verify: typeof schnorrVerify;\n  utils: {\n    randomPrivateKey: () => Uint8Array;\n    lift_x: typeof lift_x;\n    pointToBytes: (point: PointType<bigint>) => Uint8Array;\n    numberToBytesBE: typeof numberToBytesBE;\n    bytesToNumberBE: typeof bytesToNumberBE;\n    taggedHash: typeof taggedHash;\n    mod: typeof mod;\n  };\n};\n/**\n * Schnorr signatures over secp256k1.\n * https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\n * @example\n * import { schnorr } from '@noble/curves/secp256k1';\n * const priv = schnorr.utils.randomPrivateKey();\n * const pub = schnorr.getPublicKey(priv);\n * const msg = new TextEncoder().encode('hello');\n * const sig = schnorr.sign(msg, priv);\n * const isValid = schnorr.verify(sig, msg, pub);\n */\nexport const schnorr: SecpSchnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fpk1,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fpk1, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fpk1.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fpk1.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fpk1.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\n\n/** secp256k1 hash-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const hashToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.hashToCurve)();\n\n/** secp256k1 encode-to-curve from [RFC 9380](https://www.rfc-editor.org/rfc/rfc9380). */\nexport const encodeToCurve: HTFMethod<bigint> = /* @__PURE__ */ (() => htf.encodeToCurve)();\n","/**\n * Utilities for short weierstrass curves, combined with noble-hashes.\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport type { CHash } from './abstract/utils.js';\nimport { type CurveFn, type CurveType, weierstrass } from './abstract/weierstrass.js';\n\n/** connects noble-curves to noble-hashes */\nexport function getHash(hash: CHash): {\n  hash: CHash;\n  hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => Uint8Array;\n  randomBytes: typeof randomBytes;\n} {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n/** Same API as @noble/hashes, with ability to create curve with custom hash */\nexport type CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport type CurveFnWithCreate = CurveFn & { create: (hash: CHash) => CurveFn };\n\nexport function createCurve(curveDef: CurveDef, defHash: CHash): CurveFnWithCreate {\n  const create = (hash: CHash): CurveFn => weierstrass({ ...curveDef, ...getHash(hash) });\n  return { ...create(defHash), create };\n}\n"],"names":["HMAC","_Hash","_inherits","_super","_createSuper","hash","_key","_this","_classCallCheck","call","finished","destroyed","ahash","key","toBytes","iHash","create","update","Error","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","_createClass","value","buf","aexists","this","out","abytes","digestInto","destroy","to","Object","getPrototypeOf","_cloneInto","Hash","hmac","message","_0n","BigInt","_1n","_2n","isBytes","a","ArrayBuffer","isView","constructor","name","item","abool","title","hexes","Array","from","_","toString","padStart","bytesToHex","bytes","hex","numberToHexUnpadded","num","hexToNumber","asciis","_0","_9","A","F","f","asciiToBase16","ch","hexToBytes","hl","al","array","ai","hi","n1","charCodeAt","n2","undefined","char","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","n","len","numberToBytesLE","numberToVarBytesBE","ensureBytes","expectedLength","res","e","concatBytes","sum","arguments","equalBytes","b","diff","utf8ToBytes","str","TextEncoder","encode","isPosBig","inRange","min","max","aInRange","bitLen","bitGet","pos","bitSet","bitMask","u8n","data","u8fr","arr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","h","_len","apply","concat","reseed","seed","gen","sl","slice","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isSafeInteger","Number","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","_i2","_Object$entries","entries","_Object$entries$_i","_slicedToArray","_i3","_Object$entries2","_Object$entries2$_i","notImplemented","memoized","fn","map","WeakMap","arg","get","_len2","args","_key2","computed","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","number","y","u","q","r","m","FpSqrt","P","p1div4","root","eql","sqr","c1","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","reduce","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","Math","ceil","Field","isLE","redef","sqrtP","_nLength","freeze","is0","isOdd","lhs","rhs","add","p","d","FpPow","div","sqrN","addN","subN","mulN","inv","sqrt","invertBatch","lst","nums","tmp","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","c","fromBytes","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","constTimeNegate","condition","negate","validateW","W","bits","calcWOpts","windows","windowSize","validateMSMPoints","points","forEach","validateMSMScalars","scalars","s","pointPrecomputes","pointWindowSizes","getW","validateBasic","curve","Gx","Gy","_objectSpread","validateSigVerOpts","opts","lowS","prehash","b2n","ut","h2b","DERErr","_Error","_wrapNativeSuper","DER","Err","_tlv","tag","E","dataLen","lenLen","decode","first","lengthBytes","subarray","_step","_iterator","_createForOfIteratorHelper","done","err","l","_int","parseInt","toSig","int","tlv","_tlv$decode","seqBytes","_tlv$decode2","rBytes","rLeftBytes","_tlv$decode3","sBytes","hexFromSig","sig","seq","weierstrassPoints","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","endo","beta","splitScalar","validatePointOpts","Fn","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","normPrivateKeyToScalar","lengths","N","includes","error","assertPrjPoint","other","Point","toAffineMemo","iz","px","py","z","pz","ax","ay","zz","assertValidMemo","_p$toAffine","left","right","wnaf","setWindowSize","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","equals","wNAFCached","normalizeZ","sc","I","hasPrecomputes","wNAFCachedUnsafe","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","_endo$splitScalar2","_this$wNAF","wNAF","f1p","_this$wNAF2","f2p","_this$wNAF3","G","BASE","multiply","multiplyUnsafe","cofactor","isCompressed","assertValidity","toRawBytes","_ref","toInv","fromAffine","privateKey","fieldN","zero","wbits","buckets","floor","j","resI","sumI","pippenger","_bits","elm","unsafeLadder","precomputeWindow","_calcWOpts","base","window","precomputes","_calcWOpts2","mask","maxNumber","shiftBy","offset","offset1","offset2","abs","cond1","cond2","wNAFUnsafe","_calcWOpts3","curr","getPrecomputes","transform","comp","prev","delete","ProjectivePoint","isWithinCurveOrder","weierstrass","curveDef","randomBytes","bits2int","bits2int_modN","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","_weierstrassPoints","cat","hasEvenY","head","y2","sqrtError","suffix","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","_DER$toSig","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","mapHashToField","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","_prepSig","C","drbg","verify","signature","publicKey","_Point$BASE$multiplyA","sg","format","isHex","isObj","_sig","fromDER","derError","fromCompact","_sig2","is","mapToCurveSimpleSWU","B","sqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","tvv5","e1","y1","SWUFpSqrtRatio","tv6","_sqrtRatio","os2ip","i2osp","anum","strxor","hash_to_field","msg","count","options","DST","expand","_DST","prb","log2p","L","len_in_bytes","lenInBytes","H","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","Fpk1","secp256k1","defHash","msgs","getHash","createCurve","a1","b1","a2","POW_2_128","sha256","TAGGED_HASH_PREFIXES","taggedHash","tagP","tagH","messages","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","_schnorrGetExtPubKey","t","rand","k_","_schnorrGetExtPubKey2","rx","schnorrVerify","pub","schnorr","isoMap","COEFF","_COEFF$map","_COEFF$map2","xNum","xDen","yNum","yDen","isogenyMap","mapSWU","htf","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","createHasher","_mapSWU"],"sourceRoot":""}